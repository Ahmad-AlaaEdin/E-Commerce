
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  active    Boolean  @default(true)
  photo     String?
  phone     String?
  createdAt DateTime @default(now())
  passwordChangedAt DateTime? 
  passwordResetToken String?
  passwordResetExpiresAt DateTime?
  Address    Address?
  Cart       Cart[]
  Orders     Order[]
}

model Address {
  id     String  @id @default(uuid())
  street String
  city   String
  zip    String
  userId String  @unique 
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id       String      @id @default(uuid())
  name     String      @unique
  slug     String      @unique
  description String?
  products Product[]
  subCategories SubCategory[]
}
model SubCategory {
  id       String      @id @default(uuid())
  name     String      @unique
  slug     String      @unique
  description String?
  categoryId  String       
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products    Product[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Float
  description String
  image      String  
  categoryId  String     
  subCategoryId  String?  
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull) 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  stock       Int       @default(0)
  OrderItems  OrderItem[]
  CartItems   CartItem[]
}
model Cart {
  id        String      @id @default(uuid())
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]  

  @@unique([userId]) 
}

model CartItem {
  id        String    @id @default(uuid())
  cartId    String
  productId String
  quantity  Int       @default(1)

  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId]) 
}


model Order {
  id             String      @id @default(uuid())
  userId         String      
  total          Float
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  paymentIntentId String?    @unique

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String     
  productId String     
  quantity  Int     
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id             String        @id @default(uuid())
  orderId        String        @unique
  paymentMethod  String
  transactionId  String?       @unique
  status         PaymentStatus @default(PENDING)
  createdAt      DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
