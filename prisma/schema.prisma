generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Address    Address?
  Cart       Cart[]
  Orders     Order[]
}

model Address {
  id     Int    @id @default(autoincrement())
  street String
  city   String
  zip    String
  userId Int    @unique 
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  description String?
  products Product[]
  subCategories SubCategory[]
}
model SubCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  slug     String    @unique
  description String?
  categoryId  Int       
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  price       Float
  description String
  images      String[]  
  categoryId  Int       
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  CartItems   Cart[]
  OrderItems  OrderItem[]
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int     
  productId Int     
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // Ensures each user can have only one entry per product in their cart
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int      
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     
  productId Int     
  quantity  Int     
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id           Int     @id @default(autoincrement())
  orderId      Int     @unique
  paymentMethod String
  transactionId String @unique
  status       PaymentStatus @default(PENDING)
  createdAt    DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
